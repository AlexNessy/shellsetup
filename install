#!/bin/bash 
# colours for shellsetup logo
GREEN='\033[0;32m'
NC='\033[0m'

currentDir=$PWD

# for paru
which pacman > /dev/null 2>&1
pacmanCode=$?

# while loop vars
Menu=1
AliasMenu=1

random=$RANDOM

# package list for -p flag
packageList=(
  "base-devel"
  "github-cli"
  "gh"
  "cmatrix"
  "neofetch"
  "btop"
  "git"
  "neovim"
  "fastfetch"
  "zsh"
  "bat"
  "smbclient"
  "tldr"
  "fzf"
  "wget"
  "fd"
  "tmux"
  "openssh"
  "awk"
  "grep"
  "sed"
)

# temporary fix for 'New Changes' in git commit message
newChanges='"New Changes"'

alias=(
  "nv='nvim'" 
  "sp='sudo pacman'" 
  "chx='chmod +x'" 
  "gitc='git add .; git commit -m $newChanges; git push'"
  "rsync-copy='rsync -avzPh'" 
  "rsync-move='rsync -avzPh --remove-source-files'" 
  "rsync-update='rsync -avzuPh'" 
  "rsync-synchronize='rsync -avzuPh --delete'"
  "yay='paru'"
)

plugins=(
  "git"
  "zsh-autosuggestions"
  "zsh-syntax-highlighting"
  "zsh-z"
  "fzf"
  "gh"
  "magic-enter"
  "colored-man-pages"
)

print_usage() {
  echo "Usage: -p - list packages"
}

# used for -p flag
printPackages(){
  for i in "${packageList[@]}"
  do
    echo "$i"
  done
}

# flags
while getopts 'p' flag; do
  case "$flag" in
    p) printPackages; exit;;
    *) print_usage
    exit 1 ;;
  esac
done

# check package manager and set install function
whichPM() {
  which "$1" >/dev/null 2>&1
  local exitCode=$?
  [[ $exitCode == 0 ]] && packageManager="$1" && flags="$2" && installerVar=1
}

installer() { 
  echo "Installing $1"
  IFS=' ' read -r -a flagsArray <<< "$flags"
  sudo "$packageManager" "${flagsArray[@]}" "$1" 
}

whichPM "dnf" "-y install"
whichPM "pacman" "-S --noconfirm --needed"
whichPM "apt" "-y install"
  
[[ -z $installerVar ]] && echo "Your package manager is not supported yet"

# 1st input for shell, 2nd input for type of config
shellInstall(){
  echo "Installing $shell"
  installer "$shell"
  echo "Checking if $shell is default shell"
  shellPath=$(which "$shell")
  if [[ $SHELL != "$shellPath" ]]; then
    echo "$shell is not default, changing shell"
    chsh -s "$shellPath"
  fi
  if [[ $choice = "1" ]]; then
    echo "Creating backup of .${shell}rc"
    cp ~/."$shell"rc  ~/."$shell"rc.bak."$random"
    echo "Installing ohmy${shell}"
    if [[ $shell == "zsh" ]]; then
      # ohmyzsh installation
      wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O - | sed s/RUNZSH:-yes/RUNZSH:-no/g | sh > /dev/null 2>&1
      # plugins + theme installation
      git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k
      git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
      git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
      git clone https://github.com/agkozak/zsh-z ~/.oh-my-zsh/custom/plugins/zsh-z
  # plugins integration
      echo "Adding plugins"
      pluginGrep=$(grep '^plugins=(.*)$' ~/.zshrc)
      pluginAwk=$(awk -F "[()]" '{print $2}' <<< "$pluginGrep")
      IFS=' ' read -r -a pluginArray <<< "$pluginAwk"
      for i in "${pluginArray[@]}"
      do
        [[ "${plugins[*]}" =~ $i ]] || plugins+=("$i")
      done
      sed -i s/"^plugins=(.*)$"/"plugins=(${plugins[*]})"/g ~/.zshrc
      echo "Adding theme"
      sed -i 's@ZSH_THEME=.*@ZSH_THEME="powerlevel10k/powerlevel10k"@g' ~/.zshrc
    elif [[ $shell == "bash" ]]; then
      # ohmybash installation
      bash -c "$(wget https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh -O -)" --unattended
    fi
  fi
  # aliases add
  aliases ~/."$shell"rc
  echo "Sourcing .${shell}rc"
  # probably broken
  [[ $shell == zsh ]] && /bin/zsh -c "source $HOME/.zshrc"
  [[ $shell == bash ]] && source "$HOME/.bashrc"
  /bin/zsh -c 'source ~/.zshrc'
}

aliases(){
  rcFile="$1"
  for i in "${alias[@]}"
  do
    aliasGrep=$(awk -F "'" '{print $1}' <<< "$i")
    grep "alias $aliasGrep" "$rcFile" > /dev/null 2>&1
    grepCode=$?
    [[ $grepCode == 1 ]] && echo -e "alias $i" >> "$rcFile"
  done
  while [[ $AliasMenu = 1 ]]; do
    echo -e "Any aliases you want to add?\n (1) Yes\n (2) No\n (3) List Current Aliases"
    read -r aliasChoice
    if [[ "$aliasChoice" == "1" ]]; then
      echo "Alias Command (use double quotes instead of '' if you need to):"
      read -r aliasCmd
      echo "What alias do you want to use for this command?:"
      read -r aliasName
      echo -e "alias $aliasName='$aliasCmd'" >> "$rcFile"
    fi
    [[ "$aliasChoice" == "2" ]] && AliasMenu=0
    [[ "$aliasChoice" == "3" ]] && grep "^alias.*" "$rcFile"
  done
}

nvimconfig(){
  echo -e "Do you want nvim config too? (Current config will be backed up)\n (1) Yes\n (2) No"
  read -r nvimconfig
  if [[ $nvimconfig == 1 ]]; then
    echo "Creating backup"
    find ~/.config -type d -name "nvim" && rsync -avPh ~/.config/nvim/ ~/.config/nvim."$random".bak && rm -rf ~/.config/nvim
    echo "Cloning config"
    git clone https://github.com/alexnessy/nvim-config
    echo "Copying config"
    cp -r nvim-config/nvim ~/.config/
    rm -rf nvim-config
  fi
}

clear
echo "Welcome to..."
echo -e " ${GREEN}
         __         ____          __            
   _____/ /_  ___  / / /_______  / /___  ______  
  / ___/ __ \/ _ \/ / / ___/ _ \/ __/ / / / __ \ 
 (__  ) / / /  __/ / (__  )  __/ /_/ /_/ / /_/ / 
/____/_/ /_/\___/_/_/____/\___/\__/\__,_/ .___/  
                                       /_/      ${NC}"
while [[ $Menu == 1 ]]; do
  echo -e "Do you want:\n(1) Full setup \n(2) Light setup \n(3) More info"
  read -r choice
  if [[ $choice != 1 ]] && [[ $choice != 2 ]] && [[ $choice != 3 ]]; then
      exit
  elif [[ $choice == 3 ]]; then
    echo -e "The full setup consists of all customisation options including setting the chosen shell as default, aliases, oh my (shell) installation and plugins. \nThe light setup consists of only setting the default shell without aliases and other features. To list packages, run with -p flag."
  elif [[ $choice == 1 ]] || [[ $choice == 2 ]]; then
    echo -e "What shell do you want to use? \n(1) zsh \n(2) bash \n(3) skip shell config"
    read -r shell
    [[ $shell != 1 ]] && [[ $shell != 2 ]] && [[ $shell != 3 ]] && exit
    Menu=0
  fi
done

[[ $shell == 1 ]] && shell="zsh" 
[[ $shell == 2 ]] && shell="bash"
[[ $choice == 1 ]] && choice="full"
[[ $choice == 2 ]] && choice="lite"

# install packages
for i in "${packageList[@]}"
do
  installer "$i"
done

# install paru
if [[ $pacmanCode == 0 ]]; then
  which paru
  whichCode=$?
  if [[ $whichCode != 0 ]]; then
    git clone https://aur.archlinux.org/paru.git
    cd paru || exit
    makepkg -si --noconfirm
    cd ..
    rm -rf paru
    cd "$currentDir" || exit
  fi
fi

# add font to make sure it's available
if [[ $shell == "zsh" && $choice == "full" ]]; then
  echo "Installing font"
  find ~/.local/share/fonts -type f -name "MesloLGS NF Regular\.ttf" 
  findCode=$?
  if [[ $findCode != 0 ]]; then
    wget "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS NF Regular.ttf"
    mkdir -p ~/.local/share/fonts
    mv 'MesloLGS NF Regular.ttf' ~/.local/share/fonts
  fi
fi

echo "All packages installed"

 
shellInstall 

nvimconfig

[[ $choice == "zsh" && $shell == "full" ]] && echo "All changes made! Restart terminal for configuration of CLI. Make sure to change terminal font to MesloLGS NF." && exit
echo -e "All changes made.\nEnjoy!"
